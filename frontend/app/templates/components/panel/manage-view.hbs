{{#elem/panel-container state="primary" as |panelContainer|}}
    {{#elem/panel-heading icon="globe" panelContainer=panelContainer}}
        Displayed Data
    {{/elem/panel-heading}}
    {{#if panelContainer.showComponent}}

  <BsTab @customTabs={{true}} @fade={{false}} @onChange={{action this.onChangeTab}} @activeId={{this.activeId}} as |tab|>
    <BsNav @type="tabs" as |nav|>
    <ul class="nav nav-tabs li-active-extra counts">

        {{#let 'Blocks' as |tabTypeName|}}
          {{#let (compute (action this.datasetTypeTabId tabTypeName)) as |tabId|}}
            <nav.item class="active-detail" @active={{bs-eq tab.activeId tabId}}><a href={{concat "#" tabId}} role="tab" onclick={{action tab.select tabId}}>{{tabTypeName}}</a>
              <div>{{this.block.viewed.length}}</div>
            </nav.item>
          {{/let}}
        {{/let}}

        {{#let 'Trait' as |tabTypeName|}}
          {{#let (compute (action this.datasetTypeTabId tabTypeName)) as |tabId|}}
            <nav.item class="active-detail" @active={{bs-eq tab.activeId tabId}}><a href={{concat "#" tabId}} role="tab" onclick={{action tab.select tabId}}>{{tabTypeName}}</a>
              <div>{{this.trait.traitsInView.length}}</div>
            </nav.item>
          {{/let}}
        {{/let}}

        {{#let 'Ontology' as |tabTypeName|}}
          {{#let (compute (action this.datasetTypeTabId tabTypeName)) as |tabId|}}
            <nav.item class="active-detail" @active={{bs-eq tab.activeId tabId}}><a href={{concat "#" tabId}} role="tab" onclick={{action tab.select tabId}}>{{tabTypeName}}</a>
              <div>{{compute (action this.keysLength this.ontology.ontologyIsVisible)}}</div>
            </nav.item>
          {{/let}}
        {{/let}}

    </ul>
    </BsNav>

    <div class="tab-content">

    {{!-- viewed-settings is now used by manage-explorer : colourAndVisibleBy(); perhaps use CSS display:none when tab-view-Blocks  --}}
      {{panel/viewed-settings changed=(action this.viewedSettingsChanged)}}

        {{#let 'Blocks' as |tabTypeName|}}
          {{#let (compute (action this.datasetTypeTabId tabTypeName)) as |tabId|}}

{{#tab.pane id=tabId title=tabTypeName}}

    {{!--  will split this out to a separate component.  time to release. --}}
    <ul id="display-blocks" class="list-group">
        {{#if this.hasDisplayData}}
        <li class="list-group-item" style="min-height: 55px;" >
          <span class="pull-right">
            {{elem/button-base
              classSize='xs'
              classColour='danger'
              icon='minus'
              onClick=(action 'removeDisplayData')}}
          </span>
          <label class="pull-right" style="margin: 0.5em; margin-right: 1.5em;">Close all axes</label>
        </li>
        {{/if}}

        {{#each this.displayData as |block|}}
        <li 
            class="list-group-item {{if (compare block.id '===' this.selectedBlock.id) 'list-group-item-warning'}}"
            data-chr-id={{block.id}}
            {{action "selectBlock" block on="click"}}>
            <span title="{{block.datasetId.name}} {{block.name}}" class="truncate" style="max-width:260px">
              {{block.datasetId.name}} {{block.name}}
            </span>
            {{elem/icon-owner state=block.owner}} {{elem/icon-visible state=block.public}}

            <span class="pull-right">
            {{elem/button-base
                classSize='xs'
                classColour='danger'
                icon='minus'
                onClick=(action "removeBlock" block)}}
            </span>

            <p class="list-group-item-text">
            <span class="label label-info">
                {{elem/icon-base name="asterisk"}} &nbsp;{{block.features.length}}
            </span> &nbsp;
            <span class="label label-info">
                {{elem/icon-base name="tag"}} &nbsp;{{block.annotations.length}}
            </span> &nbsp;
            <span class="label label-info">
                {{elem/icon-base name="resize-vertical"}} &nbsp;{{block.intervals.length}}
            </span>
            </p>
        </li>
        {{/each}}
    </ul>


{{/tab.pane}}
          {{/let}}
        {{/let}}

{{!-- --------------------------------------------------------------------- --}}

        {{#let 'Trait' as |tabTypeName|}}
          {{#let (compute (action this.datasetTypeTabId tabTypeName)) as |tabId|}}

{{#tab.pane id=tabId title=tabTypeName}}
{{panel/trait-qtl data=this.trait.traitsInView}}
{{/tab.pane}}
          {{/let}}
        {{/let}}

{{!-- --------------------------------------------------------------------- --}}


        {{#let 'Ontology' as |tabTypeName|}}
          {{#let (compute (action this.datasetTypeTabId tabTypeName)) as |tabId|}}

{{#tab.pane id=tabId title=tabTypeName}}
{{panel/ontologies}}
{{/tab.pane}}
          {{/let}}
        {{/let}}



    </div>      {{!-- end of class="tab-content" --}}

  </BsTab>




  {{/if}} {{!-- showComponent --}}
{{/elem/panel-container}}



{{!-- --------------------------------------------------------------------- --}}

{{#if this.isMapview}}
{{#elem/panel-container state="primary" showComponent=this.showChartOptions as |panelContainer|}}
  {{#elem/panel-heading icon="wrench" panelContainer=panelContainer}}
    Chart Options

  {{/elem/panel-heading}}

  {{#if panelContainer.showComponent}}

    {{!-- .chart-options is enabled by options=chartOptions -> body.chartOptions .chart-options CSS  --}}
    <ul class="list-group chart-options">
      <li class="list-group-item">
        {{input type="checkbox" checked=this.isShowUnique class="toggle"}}
        <label {{action "toggleShowUnique" on="click"}}>Show Unique</label>
      </li>
      <li class="list-group-item">
        {{input type="checkbox" checked=this.pathColourScale class="toggle"}}
        <label {{action "togglePathColourScale" on="click"}}>Path Colour Scale</label>
      </li>
      <li class="list-group-item">
        {{input type="checkbox" checked=this.showScaffoldFeatures class="toggle"}}
        <label>Show Scaffold Features</label>
      </li>
      <li class="list-group-item">
        {{input type="checkbox" checked=this.showAsymmetricAliases class="toggle"}}
        <label>Show Asymmetric Aliases</label>
      </li>
    </ul>

    <div class="panel-body">
      <div class="drawing-controls flowButtons vspace1">
        {{draw/flow-controls viewOptions=(hash this.isShowUnique this.pathColourScale this.showScaffoldFeatures this.showAsymmetricAliases) modelParamOptions=this.model.params.options }}
      </div>
    </div>

  {{/if}} {{!-- showComponent --}}

{{/elem/panel-container}}

{{!-- --------------------------------------------------------------------- --}}

{{panel/view-controls controls=this.controls drawActions=this}}

{{!-- --------------------------------------------------------------------- --}}

{{#elem/panel-container state="primary" as |panelContainer|}}
  {{#elem/panel-heading icon="option-vertical" panelContainer=panelContainer}}
    Colour / Style Editor
  {{/elem/panel-heading}}
  {{#if panelContainer.showComponent}}
    {{draw/style-editor}}
  {{/if}} {{!-- showComponent --}}
{{/elem/panel-container}}

{{!-- --------------------------------------------------------------------- --}}

{{/if}}
